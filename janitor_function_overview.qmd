---
format: 
  revealjs:
    theme:  [default, starwars.scss]
    transition: fade
    slide-number: true
    scrollable: true
embed-resources: true
execute:
  echo: true 
editor: source
---

```{r}
#| include: false
library(tidyverse)
library(janitor)
library(gt)
library(gtExtras)

## load in data sets
# characters <- read_csv("data/characters.csv")
characters_messy <- read_csv("data/characters_messy.csv")
# films <- read_csv("data/films.csv")
films_messy <- readxl::read_excel("data/films_messy.xlsx")
# species <- read_csv("data/species.csv")
species_messy <- readxl::read_excel("data/species_messy.xlsx")
```

# {janitor} {.starwarsyellow background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/leia-flyboy.gif){width="30%"}

Caroline Kostrzewa, Sabrina Lin

Topic Tuesdays: 2024-10-01

## FYI

![](images/masking-warning.png) 

* `janitor::chisq.test()` and `janitor::fisher.test()` mask the versions in `{stats}`   
* After loading `{janitor}` if you call `chisq.test()` without specifying which package, it will default to the `{janitor}` package (loaded in last)    

## Data

* Using three data sets which we have "messed up" in various ways (all from [Kaggle](https://www.kaggle.com/datasets/jsphyg/star-wars))   
  + Species     
  + Characters    
  + Films 

## Species

```{r}
#| echo: false
species_messy |> 
  slice(1:10) |> 
  gtreg::tbl_listing(bold_headers = FALSE) |> 
  gtreg::as_gt() |>
  tab_options(
      heading.align = "left",
      heading.border.bottom.style = "none",
      table.background.color = "#333333",
      table.font.color.light = "white",
      table.border.top.style = "none",
      table.border.bottom.color = "#333333",
      table.border.left.color = "#333333",
      table.border.right.color = "#333333",
      table_body.border.top.style = "none",
      table_body.border.bottom.color = "#333333",
      column_labels.border.top.style = "none",
      column_labels.background.color = "#333333",
      column_labels.border.bottom.width = 3,
      column_labels.border.bottom.color = "white",
      data_row.padding = px(7)
    )
```


## Characters

```{r}
#| echo: false
characters_messy |> 
  slice(1:10) |> 
  gtreg::tbl_listing() |> 
  gtreg::as_gt() |> 
  gtExtras::gt_theme_dark()
```

```{r}
#| include: false

characters_messy <- 
  characters_messy |> 
  mutate(death_status = if_else(!is.na(year_died), "dead", "alive"),
         bmi = if_else(weight > 75, "BMI High", "BMI Low"))
```

```{r}
#| include: false

characters_human_messy <- 
  characters_messy |> 
  filter(species %in% c("Human"))
  
characters_nonhuman_messy <- 
  characters_messy |> 
  filter(!species %in% c("Human"))
```


## Films

```{r}
#| echo: false
films_messy <- 
  films_messy |> 
  # manipulating data for later example
  mutate(
    sl_opinion = case_when(
      director %in% c("J.J. Abrams") ~ NA_character_,
      .default = "good"
    ),
    ck_opinion = NA
  )

films_messy |> 
  gtreg::tbl_listing() |> 
  gtreg::as_gt() |> 
  gtExtras::gt_theme_dark()
```



# Cleaning {.starwarsyellow background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/star-wars-han-solo.gif)

    
## `clean_names()`

Cleans names of an object (usually a data.frame)

```{r}
#| output-location: fragment

names(species_messy)
```

<br>

. . . 

```{r}
#| output-location: fragment
#| warning: true

species_messy |> 
  clean_names(
    case = "snake", #default case
  ) |> 
  names()
```


## `clean_names()` continued

```{r}
species_messy |> 
  clean_names(
    case = "snake", #default case
  ) |> 
  names()
```

<br>

. . . 

```{r}
#| output-location: fragment
species_messy |> 
  clean_names(
    case = "snake", #default case
    replace = c("hAiR" = "hair", "cOlOrS" = "colors", "hOmEwOrLd" = "homeworld", 
                janitor:::mu_to_u)
  ) |> 
  names()
```

## `clean_names()` continued (again)

```{r}
species_messy |> 
  clean_names(
    case = "snake", #default case
  ) |> 
  names()
```

<br>

. . . 

[BONUS]{.emphasized} If you don't want to list out all capitalization fixes, you can change the parsing option, but it will override the `case=` argument.

```{r}
#| output-location: fragment

species_messy |> 
  clean_names(
    case = "snake",
    parsing_option = 0,
    replace = janitor:::mu_to_u
  ) |> 
  names()
```


## `make_clean_names()`

Returns a clean character vector

```{r}
#| output-location: fragment

species_messy |> 
  select(name) |> 
  mutate(
    NAME_CLEAN = make_clean_names(name)
  )
```

    
## `get_dupes()`

Shows the duplicated rows according to a certain column (or multiple columns).

```{r}
#| output-location: fragment

characters_messy |> 
  get_dupes(name) |> 
  select(name, dupe_count, species, height, weight, homeworld) |> 
  print(n = Inf)
```

## `convert_to_date()`

* Can handle mixed types ("2024-10-01" [character] vs 344402 [numeric])   
* Will handle Excel-specific date numbers (through `excel_numeric_to_date()`)

```{r}
#| output-location: fragment

films_messy |> 
  mutate(release_date_clean = convert_to_date(release_date),
         release_data_lub = lubridate::as_date(release_date)) |> 
  select(title, release_date, release_date_clean, release_data_lub)
```


## `remove_empty()`

Removes empty columns from a data frame

```{r}
#| output-location: fragment

films_messy |> 
  select(title, director, sl_opinion, ck_opinion)
```

<br>

. . . 

```{r}
#| output-location: fragment


films_messy |> 
  select(title, director, sl_opinion, ck_opinion) |> 
  remove_empty("cols")
```


## `remove_constant()`

Removes columns with one constant value

```{r}
#| output-location: fragment

films_messy |> 
  select(title, director, sl_opinion, ck_opinion) |>
  remove_constant()
```


## `remove_constant()` continued

Can also specify whether NA's should be considered different from a constant value

```{r}
#| output-location: fragment

films_messy |> 
  select(title, director, sl_opinion, ck_opinion) |>
  remove_constant(
    na.rm = TRUE # default is FALSE
  )
```

# Tidying {.starwarsyellow background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/star-wars-junk.gif)


## Rounding in `{base}` vs rounding in `{janitor}`

Selecting some data to work with...

```{r}
characters_messy |> 
  select(name, height) |> 
  filter(name %in% c("Leia Organa", "Pong Krell"))
```


## Rounding in `{base}` vs rounding in `{janitor}`

:::: {.columns}

::: {.column width="50%"}
`base::round()`
```{r}
#| output-location: fragment


base::round(1.5)
```

```{r}
#| output-location: fragment


base::round(2.5)
```
:::

::: {.column width="50%"}
`janitor::round_half_up()`
```{r}
#| output-location: fragment


janitor::round_half_up(1.5)
```

```{r}
#| output-location: fragment


janitor::round_half_up(2.5)
```
:::

::::

## `round_half_up()`

Rounds up any .5 ("typical" rounding convention)

```{r}
#| output-location: fragment


characters_messy |> 
  select(name, height) |> 
  mutate(
    HEIGHT_HALFUP = round_half_up(height)
  )
```


## `signif_half_up()`

Similar to `round_half_up()` but can specify number of significant digits

```{r}
#| output-location: fragment


characters_messy |> 
  select(name, height) |> 
  mutate(
    HEIGHT_SIGFIG = signif_half_up(height, digits = 2)
  )
```


## `round_to_fraction()`

WORK IN PROGRESS (WIP)

Rounds to the nearest fraction

```{r}
#| output-location: fragment

characters_messy |> 
  select(name, height) |> 
  mutate(
    HEIGHT_FRACTION = round_to_fraction(height, denominator = 4)
  )
```


## `compare_df_cols()`

Used to see whether column classes conflict and prevent row binding

```{r}
#| output-location: fragment

compare_df_cols(characters_human_messy, characters_nonhuman_messy)
```


## `compare_df_cols()` continued

```{r}
characters_human_extra_messy <-
  characters_human_messy |> 
  mutate(
    across(everything(), ~as.character(.x))
  )
```

<br>

```{r}
#| output-location: fragment


compare_df_cols(characters_human_extra_messy, characters_nonhuman_messy)
```


## `compare_df_cols_same()`

Returns `TRUE` or `FALSE` saying if the dataframes can successfully row bind

```{r}
#| output-location: fragment


compare_df_cols_same(characters_human_messy, characters_nonhuman_messy)
```

<br>

. . . 

```{r}
#| output-location: fragment


compare_df_cols_same(characters_human_extra_messy, characters_nonhuman_messy)
```


# `tabyl()` {background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/the-garbage-will-do-rey-palpatine.gif) 

## `tabyl()` basics

`tabyl()` is halfway between `table()` and `gtsummary::cross_tab()`

```{r}
#| output-location: fragment

## one variable
characters_messy |> 
  tabyl(death_status)
```

<br>

. . . 

```{r}
#| output-location: fragment

## two variables
characters_messy |> 
  tabyl(death_status, bmi)
```

. . . 

[Note:]{.emphasized} you can `untabyl()` a tabyl to remove all tabyl properties

## `adorn_*()`

Functions to make your "tabyls" more readable:

* `adorn_title()` -- add column name to the top of a two-way table    
* `adorn_percentages()` -- converts tabyl of counts to percentages   
* `adorn_totals()` -- add row/column totals to a tabyl   

<br> 

Functions that come after using `adorn_percentages()`

* `adorn_pct_formatting()` -- formatting decimals as percentages    
* `adorn_ns()` -- add underlying Ns to a tabyl with percentages    
* `adorn_rounding()` -- round numeric columns    




## Adorn with totals and titles

```{r}
#| output-location: fragment

characters_messy |> 
  tabyl(death_status, bmi, show_na = FALSE) |> 
  adorn_totals() |> 
  adorn_title()
```

## Adorn with percentages

```{r}
#| output-location: fragment

characters_messy |> 
  tabyl(death_status, bmi, show_na = FALSE) |> 
  adorn_percentages() |> 
  adorn_pct_formatting()
```

<br>

. . . 

```{r}
#| output-location: fragment

characters_messy |> 
  tabyl(death_status, bmi, show_na = FALSE) |> 
  adorn_percentages() |> 
  adorn_pct_formatting() |> 
  adorn_ns()
```

## Adorn with titles, totals, percentages

[Be careful of the order these functions are in...]{.emphasized}

* `adorn_totals()` must go before all other `adorn_*()` functions (gives somewhat helpful error)  
* `adorn_title()` must go after `adorn_percentages()`  (will give nonsense error)  

```{r}
#| output-location: fragment

characters_messy |> 
  tabyl(death_status, bmi, show_na = FALSE) |> 
  adorn_totals() |>
  adorn_percentages() |> 
  adorn_pct_formatting() |> 
  adorn_title()
```



# Takeaways {background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/tumblr_nm4ivvzGfn1sl21koo1_540.webp) 

## Takeaways 

::: {.incremental}

* Function [masking]{.emphasized} is something to be aware of!    
* Base R may not be rounding like you think it is...    
* Some useful functions from `{janitor}`:   
  + `clean_names()` (in every `10-setup_XXX.qmd`)   
  + `get_dupes()`     
  + `convert_to_date()`   
  + `compare_df_cols()` / `compare_df_cols_same()`    

:::

# MAY THE FORCE BE WITH YOU {background-image="images/stars_bg2.png" style="text-align: center;"}

![](images/lando-wave.webp)



